#!/usr/bin/expect -f

set timeout 60
set kaspa_cli "../rusty-kaspa/target/release/kaspa-cli"

log_user 1

puts "🔒 COMPREHENSIVE WALLET CREATOR"
puts "==============================="
puts "Capturing EVERYTHING during wallet creation"
puts ""

proc create_isolated_wallet {company_name} {
    global kaspa_cli
    
    puts "🏢 Creating wallet: $company_name"
    puts "   Step-by-step automation..."
    
    spawn $kaspa_cli
    expect "$ "
    
    puts "   1️⃣ Sending wallet create command..."
    send "wallet create --testnet-10\r"
    
    puts "   2️⃣ Waiting for account title prompt..."
    expect "Default account title:"
    puts "   ✅ Got account title prompt"
    send "$company_name\r"
    puts "   📝 Sent: $company_name"
    
    puts "   3️⃣ Waiting for phishing hint prompt..."
    expect {
        -re "Create phishing hint.*:" {
            puts "   ✅ Got phishing hint prompt"
            send "\r"
            puts "   🛡️  Skipped phishing hint"
        }
        timeout {
            puts "   ❌ No phishing hint prompt"
            send "exit\r"
            expect eof
            return ""
        }
    }
    
    puts "   4️⃣ Looking for mnemonic phrase..."
    set mnemonic ""
    expect {
        -re "Your mnemonic phrase: (.+)" {
            set mnemonic [string trim $expect_out(1,string)]
            puts "   ✅ Mnemonic found (type 1): [string length $mnemonic] chars"
        }
        -re "Mnemonic phrase: (.+)" {
            set mnemonic [string trim $expect_out(1,string)]
            puts "   ✅ Mnemonic found (type 2): [string length $mnemonic] chars"
        }
        -re "mnemonic.*: (.+)" {
            set mnemonic [string trim $expect_out(1,string)]
            puts "   ✅ Mnemonic found (type 3): [string length $mnemonic] chars"
        }
        -re "Recovery phrase: (.+)" {
            set mnemonic [string trim $expect_out(1,string)]
            puts "   ✅ Recovery phrase found: [string length $mnemonic] chars"
        }
        timeout {
            puts "   ❌ No mnemonic found after 60 seconds"
            puts "   🔍 Checking for any output..."
            expect {
                -re "(.+)" {
                    puts "   RAW: $expect_out(1,string)"
                    exp_continue
                }
                timeout {
                    puts "   No more output"
                }
            }
            send "exit\r"
            expect eof
            return ""
        }
    }
    
    puts "   5️⃣ Waiting for command prompt..."
    expect "$ "
    puts "   ✅ Back at prompt"
    
    puts "   6️⃣ Getting wallet address..."
    send "wallet address --testnet-10\r"
    
    set address ""
    expect {
        -re "(kaspatest:\[a-z0-9\]+)" {
            set address $expect_out(1,string)
            puts "   ✅ Address captured: $address"
        }
        timeout {
            puts "   ❌ No address found"
            send "exit\r"
            expect eof
            return ""
        }
    }
    
    expect "$ "
    send "exit\r"
    expect eof
    
    if {$address != "" && $mnemonic != ""} {
        puts "   🎉 SUCCESS: $company_name wallet completed!"
        puts "   📍 Address: $address"
        puts "   🔑 Mnemonic: [string range $mnemonic 0 20]..."
        puts "   🌐 Explorer: https://explorer-tn10.kaspa.org/addresses/$address"
        return "$company_name|$address|$mnemonic"
    } else {
        puts "   ❌ FAILED: Missing data"
        return ""
    }
}

# Create one wallet first to test
puts "🧪 TESTING WITH ONE WALLET FIRST"
puts "================================"

set result [create_isolated_wallet "test-company-1"]

if {$result != ""} {
    puts ""
    puts "✅ SINGLE WALLET TEST SUCCESSFUL!"
    puts "💾 Saving test result..."
    
    set fp [open "test_wallet_success.txt" w]
    puts $fp "TEST WALLET SUCCESS"
    puts $fp "=================="
    puts $fp "Master: kaspatest:qpxm5tpyg8p6z7f6hy9mtlwz2es03cqtavaldsctcdltmnz6yfz6gvurgpmem"
    puts $fp "Master Mnemonic: arrest acid fall interest comfort expire aunt combine actor tackle stove coral"
    puts $fp ""
    puts $fp "Test Company Wallet:"
    puts $fp $result
    close $fp
    
    puts "🚀 READY TO CREATE MORE WALLETS!"
} else {
    puts ""
    puts "❌ SINGLE WALLET TEST FAILED"
    puts "🔧 Need to debug the automation flow"
} 