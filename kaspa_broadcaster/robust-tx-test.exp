#!/usr/bin/expect -f

set timeout 120
set kaspa_cli "../rusty-kaspa/target/release/kaspa-cli"
set master_mnemonic "arrest acid fall interest comfort expire aunt combine actor tackle stove coral"

# CONFIRMED master wallet
set master_address "kaspatest:qpxm5tpyg8p6z7f6hy9mtlwz2es03cqtavaldsctcdltmnz6yfz6gvurgpmem"

# NEWLY CREATED company wallet
set company_address "kaspatest:qplvd467p4r0nu0ddaa6hmca6de028qj6wz3xpvrr4und0xasghwjus2rg6rc"
set company_name "manual-test-company"

set test_amount "0.01"

log_user 1

puts "🔥 ROBUST TRANSACTION TEST"
puts "=========================="
puts "FROM: $master_address"
puts "TO:   $company_address"
puts "Amount: $test_amount KAS"
puts ""

spawn $kaspa_cli
expect "$ "

# First check if there's already a wallet
puts "🔍 Checking current wallet status..."
send "wallet address --testnet-10\r"

expect {
    -re "(kaspatest:\[a-z0-9\]+)" {
        set current_address $expect_out(1,string)
        puts "📍 Current wallet: $current_address"
        
        if {$current_address eq $master_address} {
            puts "✅ Master wallet already loaded!"
            set wallet_ready 1
        } else {
            puts "⚠️  Different wallet loaded, need to import master"
            set wallet_ready 0
        }
    }
    -re "(error|Error|not found)" {
        puts "📍 No wallet loaded, need to import master"
        set wallet_ready 0
    }
    "$ " {
        puts "📍 No current wallet, need to import master"
        set wallet_ready 0
    }
    timeout {
        puts "⏱️  Timeout checking wallet"
        set wallet_ready 0
    }
}

expect "$ "

if {$wallet_ready == 0} {
    puts "🔑 Importing master wallet..."
    send "wallet import --testnet-10\r"
    
    expect {
        "Enter mnemonic:" {
            send "$master_mnemonic\r"
            puts "✅ Master mnemonic entered"
        }
        "Create phishing hint" {
            send "\r"
            expect "Enter mnemonic:"
            send "$master_mnemonic\r"
            puts "✅ Master mnemonic entered after hint"
        }
        -re "(already exists|already imported)" {
            puts "✅ Master wallet already exists"
        }
        timeout {
            puts "❌ Import timeout"
            send "exit\r"
            expect eof
            exit 1
        }
    }
    
    expect {
        "Create phishing hint" {
            send "\r"
            puts "✅ Phishing hint skipped"
        }
        "$ " {
            puts "✅ Master wallet ready"
        }
        timeout {
            puts "❌ Import completion timeout"
        }
    }
    
    expect "$ "
}

puts "💰 Checking master balance..."
send "wallet balance --testnet-10\r"
expect "$ "

puts ""
puts "🚀 SENDING TRANSACTION!"
puts "======================="

send "wallet send --testnet-10 --to $company_address --amount $test_amount\r"

set tx_success 0
set tx_id ""

expect {
    -re "Transaction.*(sent|submitted|completed)" {
        puts "✅ TRANSACTION SUCCESS!"
        set tx_success 1
    }
    -re "Transaction.*(ID|Hash).*: (\[a-f0-9\]+)" {
        set tx_id $expect_out(2,string)
        puts "✅ TRANSACTION ID: $tx_id"
        set tx_success 1
    }
    -re "(insufficient|not enough|balance)" {
        puts "💸 INSUFFICIENT FUNDS"
        puts "🎯 Fund master wallet: https://faucet-tn10.kaspa.org"
        puts "📍 Address: $master_address"
        set tx_success 0
    }
    -re "(Error|Failed|Invalid)" {
        puts "❌ FAILED: $expect_out(0,string)"
        set tx_success 0
    }
    timeout {
        puts "⏱️  TIMEOUT"
        set tx_success 0
    }
}

expect "$ "
send "exit\r"
expect eof

puts ""
if {$tx_success == 1} {
    puts "🎉 BLOCKCHAIN TRANSACTION SUCCESS!"
    puts "=================================="
    
    if {$tx_id != ""} {
        puts "✅ TX ID: $tx_id"
        puts "🌐 EXPLORER: https://explorer-tn10.kaspa.org/txs/$tx_id"
    }
    
    puts ""
    puts "📍 VERIFY ADDRESSES:"
    puts "Master:  https://explorer-tn10.kaspa.org/addresses/$master_address"
    puts "Company: https://explorer-tn10.kaspa.org/addresses/$company_address"
    puts ""
    puts "🚀 SUPPLY CHAIN ANCHORING PROVEN!"
    puts "✅ Real blockchain transactions work"
    puts "✅ Master → Company flow verified" 
    puts "✅ Can be verified on Kaspa explorer"
    
} else {
    puts "❌ TRANSACTION FAILED"
    exit 1
} 