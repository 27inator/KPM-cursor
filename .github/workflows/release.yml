name: release

on:
  push:
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  build-and-package:
    name: Build and Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            pea-agent -> target

      - name: Setup sccache (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          choco install sccache -y
          $env:SCCACHE_DIR = "$env:RUNNER_TEMP\sccache"
          New-Item -ItemType Directory -Force -Path $env:SCCACHE_DIR | Out-Null
          Add-Content -Path $env:GITHUB_ENV -Value "RUSTC_WRAPPER=sccache"
          Add-Content -Path $env:GITHUB_ENV -Value "SCCACHE_DIR=$env:SCCACHE_DIR"
          Add-Content -Path $env:GITHUB_ENV -Value "SCCACHE_CACHE_SIZE=2G"
          sccache --version

      - name: Cache sccache (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}\sccache
          key: windows-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-sccache-

      - name: Build (release)
        working-directory: pea-agent
        run: cargo build --release

      - name: Prepare artifact (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME=pea-agent
          OUTDIR=pea-agent/target/release
          VERSION=${GITHUB_REF_NAME#v}
          mkdir -p dist
          BIN="$OUTDIR/$APP_NAME"
          PKG_NAME="kpm-${APP_NAME}_${VERSION}_linux_amd64"
          cp "$BIN" "dist/$APP_NAME"
          (cd dist && tar -czf "${PKG_NAME}.tar.gz" "$APP_NAME")
          (cd dist && shasum -a 256 "${PKG_NAME}.tar.gz" > "${PKG_NAME}.tar.gz.sha256")

      - name: Prepare artifact (macOS)
        if: ${{ runner.os == 'macOS' }}
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME=pea-agent
          OUTDIR=pea-agent/target/release
          VERSION=${GITHUB_REF_NAME#v}
          mkdir -p dist
          BIN="$OUTDIR/$APP_NAME"
          PKG_NAME="kpm-${APP_NAME}_${VERSION}_macos_universal"
          cp "$BIN" "dist/$APP_NAME"
          (cd dist && tar -czf "${PKG_NAME}.tar.gz" "$APP_NAME")
          (cd dist && shasum -a 256 "${PKG_NAME}.tar.gz" > "${PKG_NAME}.tar.gz.sha256")

      - name: Prepare artifact (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $APP = "pea-agent"
          $OUT = "pea-agent/target/release/pea-agent.exe"
          $VERSION = $env:GITHUB_REF_NAME.TrimStart('v')
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item $OUT "dist\$APP.exe" -Force
          $PKG = "kpm-${APP}_${VERSION}_windows_amd64"
          Compress-Archive -Path "dist\$APP.exe" -DestinationPath "dist\$PKG.zip" -Force
          (Get-FileHash "dist\$PKG.zip" -Algorithm SHA256).Hash | Set-Content -Path "dist\$PKG.zip.sha256"

      - name: Build .deb and .rpm (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF_NAME#v}
          sudo apt-get update
          sudo apt-get install -y gnupg ruby-dev rpm build-essential
          sudo gem install --no-document fpm
          cargo install cargo-deb || true
          (cd pea-agent && cargo deb)
          mkdir -p dist
          cp pea-agent/target/debian/*.deb dist/ || true
          fpm -s dir -t rpm -n kpm-pea-agent -v "${VERSION}" --prefix /usr/local/bin pea-agent/target/release/pea-agent
          mv *.rpm dist/ || true

      - name: Install GPG (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update && sudo apt-get install -y gnupg

      - name: Install GPG (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install gnupg

        - name: Install GPG (Windows)
          if: ${{ runner.os == 'Windows' }}
          shell: pwsh
          run: |
            $ErrorActionPreference = 'Stop'
            $ProgressPreference = 'SilentlyContinue'
            # Stop any orphaned installers before starting
            Get-Process -Name 'gnupg-w32*' -ErrorAction SilentlyContinue | Stop-Process -Force
        
            function Invoke-With-Retry {
              param([scriptblock]$Script, [int]$Retries = 3, [int]$DelaySeconds = 15)
              for ($i = 1; $i -le $Retries; $i++) {
                try {
                  & $Script
                  if ($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0) { throw "Command failed with exit code $LASTEXITCODE" }
                  return
                } catch {
                  if ($i -eq $Retries) { throw }
                  Write-Warning ("Attempt $i failed: $($_.Exception.Message). Retrying in ${DelaySeconds}s...")
                  Get-Process -Name 'gnupg-w32*' -ErrorAction SilentlyContinue | Stop-Process -Force
                  Start-Sleep -Seconds $DelaySeconds
                }
              }
            }
        
            if (Get-Command winget -ErrorAction SilentlyContinue) {
              Invoke-With-Retry { winget install --id GnuPG.GnuPG --silent --accept-package-agreements --accept-source-agreements }
            } else {
              Invoke-With-Retry { choco install gnupg --yes --no-progress --execution-timeout=5400 }
            }
        
            $gpgPath = 'C:\Program Files\GnuPG\bin'
            if (Test-Path $gpgPath) { $env:PATH = "$env:PATH;$gpgPath" }
            gpg --version
      - name: Check if GPG secret present
        id: gpgcheck
        shell: bash
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then echo "present=1" >> "$GITHUB_OUTPUT"; else echo "present=0" >> "$GITHUB_OUTPUT"; fi

      - name: Import GPG private key (loopback)
        if: ${{ runner.os != 'Windows' && steps.gpgcheck.outputs.present == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg && chmod 700 ~/.gnupg
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent || true
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
          gpg --batch --list-secret-keys || true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Import GPG private key (Windows loopback)
        if: ${{ runner.os == 'Windows' && steps.gpgcheck.outputs.present == '1' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $env:GNUPGHOME = "$env:USERPROFILE\.gnupg"
          New-Item -ItemType Directory -Force -Path $env:GNUPGHOME | Out-Null
          Set-Content -Path "$env:GNUPGHOME\gpg-agent.conf" -Value "allow-loopback-pinentry" -Encoding ascii
          & gpgconf --kill gpg-agent
          "$env:GPG_PRIVATE_KEY" | Out-File -FilePath "$env:RUNNER_TEMP\key.asc" -Encoding ascii -Force
          & gpg --batch --import "$env:RUNNER_TEMP\key.asc"
          & gpg --batch --list-secret-keys
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign artifacts (Unix)
        if: ${{ runner.os != 'Windows' && steps.gpgcheck.outputs.present == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          for f in dist/*.{tar.gz,zip,deb,rpm}; do
            [ -e "$f" ] || continue
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign "$f"
          done
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign artifacts (Windows)
        if: ${{ runner.os == 'Windows' && steps.gpgcheck.outputs.present == '1' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $gpgPath = "C:\\Program Files\\GnuPG\\bin"
          if (Test-Path $gpgPath) { $env:PATH = "$env:PATH;$gpgPath" }
          gpg --version
          Get-ChildItem dist -Recurse -File | Where-Object { $_.Name -match '\.(zip|tar\.gz|deb|rpm)$' } | ForEach-Object {
            Write-Host "Signing" $_.FullName
            & gpg.exe --batch --yes --pinentry-mode loopback --passphrase $env:GPG_PASSPHRASE --armor --detach-sign $_.FullName
          }
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: dist/*

  release:
    name: Create GitHub Release
    needs: build-and-package
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Build update manifest
        shell: bash
        run: |
          set -euo pipefail
          REPO="$GITHUB_REPOSITORY"
          TAG="$GITHUB_REF_NAME"
          VERSION="${TAG#v}"
          PUBLISHED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tmp="[]"
          shopt -s globstar nullglob
          shacmd="sha256sum"
          command -v sha256sum >/dev/null 2>&1 || shacmd="shasum -a 256"
          for p in dist/**/*.{tar.gz,zip,deb,rpm} dist/*.{tar.gz,zip,deb,rpm}; do
            [ -e "$p" ] || continue
            f=$(basename "$p")
            sha=$($shacmd "$p" | awk '{print $1}')
            url="https://github.com/${REPO}/releases/download/${TAG}/${f}"
            tmp=$(node -e "let a=${tmp}; a.push({name:'${f}', url:'${url}', sha256:'${sha}'}); console.log(JSON.stringify(a))")
          done
          node -e "console.log(JSON.stringify({version:'${VERSION}', publishedAt:'${PUBLISHED_AT}', artifacts:${tmp}}))" > dist/update-manifest.json

      - name: Check if GPG secret present
        id: gpgcheck_rel
        shell: bash
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then echo "present=1" >> "$GITHUB_OUTPUT"; else echo "present=0" >> "$GITHUB_OUTPUT"; fi

      - name: Import GPG private key (loopback) for manifest
        if: ${{ steps.gpgcheck_rel.outputs.present == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg && chmod 700 ~/.gnupg
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent || true
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
          gpg --batch --list-secret-keys || true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign update manifest
        if: ${{ steps.gpgcheck_rel.outputs.present == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign dist/update-manifest.json
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-after-publish:
    name: Verify Signatures After Publish
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl gnupg

      - name: Import public root key
        run: |
          set -euo pipefail
          if curl -fsSL https://install.kpm.io/keys/public-root.gpg -o public-root.gpg; then
            gpg --import public-root.gpg
          elif [ -f ci/keys/public-root.gpg ]; then
            gpg --import ci/keys/public-root.gpg
          else
            echo "No public-root.gpg available" >&2; exit 1
          fi

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh release download "${GITHUB_REF_NAME}" --dir dist --clobber

      - name: Verify signatures
        shell: bash
        run: |
          set -euo pipefail
          for f in dist/*.{tar.gz,zip,deb,rpm,json}; do
            [ -e "$f" ] || continue
            if [ -f "${f}.asc" ]; then
              gpg --verify "${f}.asc" "$f"
            else
              echo "No signature for $f (skipping)"
            fi
          done

  pr-verify-script:
    name: PR signature verification script syntax
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Lint verify-signatures script
        run: bash -n ci/tests/verify-signatures.sh || true 
