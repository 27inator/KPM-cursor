name: 🧪 KMP Supply Chain CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_load_tests:
        description: 'Run load tests'
        required: false
        default: 'false'
      run_chaos_tests:
        description: 'Run chaos engineering tests'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '14'

jobs:
  # 🧪 Unit and Integration Tests
  test:
    name: 🧪 Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: kmp_supply_chain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: message_bus/package-lock.json

    - name: 📦 Install dependencies
      working-directory: message_bus
      run: npm ci

    - name: 🗄️ Setup database
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
      run: |
        npm run db:generate
        npm run db:push

    - name: 🔧 Build project
      working-directory: message_bus
      run: npm run build

    - name: 🧪 Run unit tests (placeholder)
      working-directory: message_bus
      run: echo "Unit tests would run here"

  # 🔄 End-to-End Tests
  e2e-tests:
    name: 🔄 End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: kmp_supply_chain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: message_bus/package-lock.json

    - name: 📦 Install dependencies
      working-directory: message_bus
      run: npm ci

    - name: 🗄️ Setup test database
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
      run: |
        npm run db:generate
        npm run db:push

    - name: 🚀 Start test server
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
        NODE_ENV: test
      run: |
        npm run dev &
        sleep 30  # Wait for server to start
      
    - name: 🧪 Run E2E tests
      working-directory: message_bus
      env:
        TEST_BASE_URL: http://localhost:4000
        TEST_TIMEOUT: 30000
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
      run: npm run test:e2e

    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: message_bus/test-results/
        retention-days: 7

  # 📈 Load Testing (Optional)
  load-tests:
    name: 📈 Load Testing
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event.inputs.run_load_tests == 'true' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: kmp_supply_chain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: message_bus/package-lock.json

    - name: 📦 Install dependencies
      working-directory: message_bus
      run: npm ci

    - name: 🗄️ Setup test database
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
      run: |
        npm run db:generate
        npm run db:push

    - name: 🚀 Start test server
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
        NODE_ENV: test
      run: |
        npm run dev &
        sleep 30

    - name: 📈 Run load tests
      working-directory: message_bus
      env:
        TEST_BASE_URL: http://localhost:4000
        TEST_CONCURRENCY: 25  # Reduced for CI environment
        LOAD_TEST_DURATION: 30000  # Shorter duration for CI
        EXPECTED_LATENCY_P95: 2000  # More lenient for CI
        EXPECTED_THROUGHPUT: 50
      run: npm run test:load

    - name: 📊 Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: message_bus/load-test-results/
        retention-days: 7

  # 🌪️ Chaos Engineering (Optional)
  chaos-tests:
    name: 🌪️ Chaos Engineering
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event.inputs.run_chaos_tests == 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: kmp_supply_chain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: message_bus/package-lock.json

    - name: 📦 Install dependencies
      working-directory: message_bus
      run: npm ci

    - name: 🗄️ Setup test database
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
      run: |
        npm run db:generate
        npm run db:push

    - name: 🚀 Start test server
      working-directory: message_bus
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/kmp_supply_chain_test
        NODE_ENV: test
      run: |
        npm run dev &
        sleep 30

    - name: 🌪️ Run chaos tests
      working-directory: message_bus
      env:
        TEST_BASE_URL: http://localhost:4000
        CHAOS_TEST_DURATION: 120000  # 2 minutes for CI
        RECOVERY_TIME: 15000  # 15 seconds
      run: npm run test:chaos

    - name: 📊 Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: message_bus/chaos-test-results/
        retention-days: 7

  # 🔍 Security Scan
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: message_bus/package-lock.json

    - name: 📦 Install dependencies
      working-directory: message_bus
      run: npm ci

    - name: 🔍 Run npm audit
      working-directory: message_bus
      run: npm audit --audit-level=moderate

    - name: 🔍 Run dependency check
      working-directory: message_bus
      run: npx audit-ci --moderate

  # 🐳 Build Docker Images
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: message_bus/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/kmp-supply-chain:latest
          ghcr.io/${{ github.repository }}/kmp-supply-chain:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "This would typically involve:"
        echo "  - Updating Kubernetes manifests"
        echo "  - Rolling out new containers"
        echo "  - Running smoke tests"
        echo "  - Updating load balancer"

    - name: 🧪 Run staging smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # curl -f https://staging-api.example.com/health

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, load-tests, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        echo "This would typically involve:"
        echo "  - Blue/green deployment"
        echo "  - Health checks and rollback capability"
        echo "  - Database migrations"
        echo "  - Cache warming"

    - name: 🧪 Run production smoke tests
      run: |
        echo "🧪 Running smoke tests on production..."
        # curl -f https://api.example.com/health

    - name: 📢 Notify deployment
      run: |
        echo "📢 Notifying team of successful deployment..."
        echo "This would send notifications to:"
        echo "  - Slack/Teams channels"
        echo "  - Monitoring systems"
        echo "  - Stakeholders"

  # 📊 Performance Monitoring
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📊 Run performance baseline
      run: |
        echo "📊 Establishing performance baseline..."
        echo "This would:"
        echo "  - Run automated performance tests"
        echo "  - Compare against previous baselines"
        echo "  - Alert if performance degraded"
        echo "  - Update monitoring dashboards"

    - name: 🔔 Setup alerts
      run: |
        echo "🔔 Configuring monitoring alerts..."
        echo "This would set up alerts for:"
        echo "  - Response time increases"
        echo "  - Error rate spikes"
        echo "  - Throughput decreases"
        echo "  - Infrastructure issues"

# 📋 Job Summary
  summary:
    name: 📋 CI/CD Summary
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security-scan, build]
    if: always()

    steps:
    - name: 📋 Print summary
      run: |
        echo "🧪 KMP Supply Chain CI/CD Pipeline Summary"
        echo "========================================"
        echo "Tests: ${{ needs.test.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo ""
        echo "✅ Pipeline completed successfully!"
        echo "🚀 Ready for production deployment" 