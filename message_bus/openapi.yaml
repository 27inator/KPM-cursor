openapi: 3.0.3
info:
  title: KMP Supply Chain Anchoring API
  description: |
    **Production-ready blockchain supply chain event anchoring platform** powered by Kaspa blockchain.
    
    ## üöÄ Features
    - **Dual-Mode Anchoring**: Direct on-chain (<20KB) or off-chain storage (unlimited size)
    - **Enterprise Authentication**: JWT tokens + API keys with company-based access control  
    - **Real-time Confirmation**: WebSocket notifications for transaction status
    - **Intelligent Payload Management**: Automatic routing based on payload size
    - **Complete Audit Trail**: Full database-powered transaction tracking
    - **Production Security**: Rate limiting, input validation, XSS protection
    
    ## üîê Authentication Methods
    1. **JWT Bearer Tokens**: For user sessions (`Authorization: Bearer <token>`)
    2. **API Keys**: For programmatic access (`X-API-Key: <api_key>`)
    3. **Public Access**: Some endpoints allow anonymous access
    
    ## üìä Payload Handling
    - **Small Payloads (<20KB)**: Stored directly on Kaspa blockchain
    - **Large Payloads (>20KB)**: Stored off-chain with content hash anchored on-chain
    - **Unlimited Size Support**: No more 25KB blockchain limits
    
    ## üåê Blockchain Integration
    - **Network**: Kaspa Testnet (upgradeable to mainnet)
    - **Confirmation Tracking**: Real-time transaction monitoring
    - **Fee Calculation**: Automatic fee estimation via rusty-kaspa
    - **Explorer Integration**: Direct links to transaction explorer
  version: 1.0.0
  contact:
    name: KMP API Support
    email: support@kmp-api.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.kmp-supply-chain.com
    description: Production server (placeholder)

security:
  - BearerAuth: []
  - ApiKeyAuth: []
  - {}  # Some endpoints allow anonymous access

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from `/api/auth/login`
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for programmatic access

  schemas:
    # üîê AUTHENTICATION MODELS
    UserRegistration:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@company.com"
        password:
          type: string
          minLength: 8
          description: Must contain uppercase, lowercase, and number
          example: "SecurePass123"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        companyId:
          type: integer
          description: Optional company ID to associate user with
          example: 1
        role:
          type: string
          enum: [user, admin, viewer]
          default: user
          description: User's role in the system

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john.doe@company.com"
        password:
          type: string
          example: "SecurePass123"

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          description: Token expiration timestamp

    User:
      type: object
      properties:
        id:
          type: integer
          example: 123
        email:
          type: string
          example: "john.doe@company.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          example: "admin"
        companies:
          type: array
          items:
            $ref: '#/components/schemas/CompanyMembership'

    CompanyMembership:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Acme Supply Chain Corp"
        role:
          type: string
          enum: [owner, admin, member, viewer]
          example: "admin"

    ApiKeyCreate:
      type: object
      required: [name, scopes]
      properties:
        name:
          type: string
          description: Descriptive name for the API key
          example: "Production Integration Key"
        scopes:
          type: array
          items:
            type: string
            enum: [read:events, write:events, read:analytics, read:transactions]
          description: Array of permission scopes
          example: ["read:events", "write:events"]
        expiresAt:
          type: string
          format: date-time
          description: Optional expiration date
          
    ApiKeyResponse:
      type: object
      properties:
        id:
          type: integer
          example: 456
        name:
          type: string
          example: "Production Integration Key"
        key:
          type: string
          description: Full API key (only shown once)
          example: "kmp_1234567890abcdef_full_key_here"
        keyPrefix:
          type: string
          description: First 8 characters for identification
          example: "kmp_1234"
        scopes:
          type: array
          items:
            type: string
          example: ["read:events", "write:events"]
        isActive:
          type: boolean
          example: true
        expiresAt:
          type: string
          format: date-time
          nullable: true

    # üì¶ SUPPLY CHAIN MODELS
    SupplyChainEvent:
      type: object
      required: [productId, location, eventType]
      properties:
        productId:
          type: string
          description: Unique identifier for the product
          example: "ORGANIC_APPLE_001"
        batchId:
          type: string
          description: Optional batch identifier
          example: "HARVEST_2025_001"
        location:
          type: string
          description: Location where event occurred
          example: "ORCHARD_WASHINGTON"
        eventType:
          type: string
          enum: [SCAN, QUALITY_CHECK, SHIPMENT, DELIVERY, STORAGE, PROCESSING, PACKAGING, CERTIFICATION, RECALL, INSPECTION]
          description: Type of supply chain event
          example: "QUALITY_CHECK"
        timestamp:
          type: string
          format: date-time
          description: When the event occurred (auto-generated if not provided)
        metadata:
          type: object
          description: Additional event-specific data
          example:
            inspector: "JOHN_DOE"
            grade: "PREMIUM"
            weight: "1.2kg"
            certification: "USDA_ORGANIC"

    SupplyChainEventResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Supply chain event submitted successfully"
        transactionId:
          type: string
          description: Kaspa blockchain transaction hash
          example: "878ca4be0c99e224606177fcdfcc4d67e5c5283274d0b04b531a07d214c7d8e0"
        blockchainExplorer:
          type: string
          format: uri
          description: Direct link to blockchain explorer
          example: "https://kas.fyi/transaction/878ca4be0c99e224606177fcdfcc4d67e5c5283274d0b04b531a07d214c7d8e0"
        eventId:
          type: integer
          description: Database ID of the created event
          example: 123
        transactionDbId:
          type: integer
          description: Database ID of the blockchain transaction record
          example: 456
        payloadHandling:
          $ref: '#/components/schemas/PayloadHandling'
        fees:
          $ref: '#/components/schemas/TransactionFees'
        user:
          $ref: '#/components/schemas/User'
          nullable: true

    PayloadHandling:
      type: object
      properties:
        strategy:
          type: string
          enum: [off_chain_storage, direct_on_chain]
          example: "direct_on_chain"
        originalSize:
          type: integer
          description: Size of original payload in bytes
          example: 304
        onChainSize:
          type: integer
          description: Size of data stored on blockchain
          example: 386
        compressionRatio:
          type: number
          description: Ratio of original to on-chain size
          example: 1.0
        contentHash:
          type: string
          description: SHA-256 hash of payload (for off-chain storage)
          nullable: true
          example: "ca2edba6b66f1b32ca4862ad3f47ceca3909bc517a4b6169aeb6b6f3efc92094"
        retrievalEndpoint:
          type: string
          description: API endpoint to retrieve off-chain payload
          nullable: true
          example: "/api/payload/ca2edba6b66f1b32ca4862ad3f47ceca3909bc517a4b6169aeb6b6f3efc92094"

    TransactionFees:
      type: object
      properties:
        calculatedByRustyKaspa:
          type: boolean
          example: true
        transactionFee:
          type: string
          example: "2000 sompis (estimated)"

    PayloadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        contentHash:
          type: string
          example: "ca2edba6b66f1b32ca4862ad3f47ceca3909bc517a4b6169aeb6b6f3efc92094"
        data:
          type: object
          description: The original payload data
        metadata:
          type: object
          description: Additional metadata about the payload
        verified:
          type: boolean
          description: Whether the payload has been cryptographically verified
          example: true
        timestamp:
          type: string
          format: date-time

    # üìä ANALYTICS MODELS
    CompanyDashboard:
      type: object
      properties:
        success:
          type: boolean
          example: true
        companyId:
          type: integer
          example: 1
        period:
          type: string
          example: "30 days"
        events:
          $ref: '#/components/schemas/EventStats'
        transactions:
          $ref: '#/components/schemas/TransactionStats'
        recentEvents:
          type: array
          items:
            $ref: '#/components/schemas/EventSummary'
        timestamp:
          type: string
          format: date-time

    EventStats:
      type: object
      properties:
        total:
          type: integer
          example: 1247
        byType:
          type: object
          additionalProperties:
            type: integer
          example:
            QUALITY_CHECK: 456
            SCAN: 321
            SHIPMENT: 234
        byStatus:
          type: object
          additionalProperties:
            type: integer
          example:
            confirmed: 1100
            pending: 125
            failed: 22

    TransactionStats:
      type: object
      properties:
        total:
          type: integer
          example: 1247
        totalFees:
          type: string
          example: "2494000 sompis"
        averageFee:
          type: string
          example: "2000 sompis"
        confirmationRate:
          type: number
          format: float
          example: 98.2

    EventSummary:
      type: object
      properties:
        id:
          type: integer
          example: 123
        productId:
          type: string
          example: "ORGANIC_APPLE_001"
        eventType:
          type: string
          example: "QUALITY_CHECK"
        location:
          type: string
          example: "ORCHARD_WASHINGTON"
        status:
          type: string
          example: "confirmed"
        timestamp:
          type: string
          format: date-time
        transactionHash:
          type: string
          nullable: true

    ProductTrace:
      type: object
      properties:
        success:
          type: boolean
          example: true
        productId:
          type: string
          example: "ORGANIC_APPLE_001"
        totalEvents:
          type: integer
          example: 8
        events:
          type: array
          items:
            $ref: '#/components/schemas/TraceEvent'
        timestamp:
          type: string
          format: date-time

    TraceEvent:
      type: object
      properties:
        id:
          type: integer
          example: 123
        eventType:
          type: string
          example: "QUALITY_CHECK"
        location:
          type: string
          example: "ORCHARD_WASHINGTON"
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          example: "confirmed"
        transactionHash:
          type: string
          nullable: true
        isOffChain:
          type: boolean
          example: false
        contentHash:
          type: string
          nullable: true

    # üîç MONITORING MODELS
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        mode:
          type: string
          example: "authentication-enabled-database-powered-real-time-intelligent-storage"
        submissionMethod:
          type: string
          example: "kaspa-rust-submitter"
        database:
          $ref: '#/components/schemas/DatabaseStats'
        storage:
          $ref: '#/components/schemas/StorageStats'
        confirmations:
          $ref: '#/components/schemas/ConfirmationStats'
        websocket:
          $ref: '#/components/schemas/WebSocketStats'

    DatabaseStats:
      type: object
      properties:
        total_companies:
          type: string
          example: "1"
        total_events:
          type: string
          example: "25"
        total_transactions:
          type: string
          example: "25"

    StorageStats:
      type: object
      properties:
        totalFiles:
          type: integer
          example: 10
        totalSize:
          type: string
          example: "2.5MB"
        averageSize:
          type: string
          example: "250KB"

    ConfirmationStats:
      type: object
      properties:
        total:
          type: integer
          example: 25
        confirmed:
          type: integer
          example: 20
        pending:
          type: integer
          example: 3
        failed:
          type: integer
          example: 2

    WebSocketStats:
      type: object
      properties:
        connected:
          type: integer
          example: 5
        authenticated:
          type: integer
          example: 3

    TransactionStatus:
      type: object
      properties:
        success:
          type: boolean
          example: true
        transactionHash:
          type: string
          example: "878ca4be0c99e224606177fcdfcc4d67e5c5283274d0b04b531a07d214c7d8e0"
        status:
          type: string
          enum: [submitted, confirmed, failed]
          example: "confirmed"
        confirmations:
          type: integer
          example: 5
        blockHeight:
          type: integer
          nullable: true
          example: 1234567
        blockHash:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time

    # üö® ERROR MODELS
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type/category
          example: "Validation Error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid event type provided"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "Validation Error"
        message:
          type: string
          example: "Request validation failed"
        validationErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "eventType"
              message:
                type: string
                example: "must be one of: SCAN, QUALITY_CHECK, SHIPMENT..."

paths:
  # üîê AUTHENTICATION ENDPOINTS
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account with optional company association
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      description: Authenticate user and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Revoke the current JWT token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Retrieve the current authenticated user's profile and company associations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/api-keys:
    post:
      tags: [Authentication]
      summary: Create API key
      description: Generate a new API key for programmatic access
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreate'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Authentication]
      summary: List API keys
      description: Get all API keys for the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKeyResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/api-keys/{keyId}:
    delete:
      tags: [Authentication]
      summary: Revoke API key
      description: Permanently revoke an API key
      security:
        - BearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: integer
          description: API key ID
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "API key revoked successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # üì¶ SUPPLY CHAIN ENDPOINTS
  /api/supply-chain/event:
    post:
      tags: [Supply Chain]
      summary: Submit supply chain event
      description: |
        Submit a supply chain event to be anchored on the Kaspa blockchain.
        
        **Payload Handling:**
        - Small payloads (<20KB): Stored directly on-chain
        - Large payloads (>20KB): Stored off-chain with content hash anchored on-chain
        
        **Authentication:**
        - Optional: Works with JWT, API key, or anonymously
        - Authenticated users: Events are associated with their company
        - Anonymous: Events are associated with default company (ID: 1)
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplyChainEvent'
      responses:
        '200':
          description: Event submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplyChainEventResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/payload/{contentHash}:
    get:
      tags: [Supply Chain]
      summary: Retrieve off-chain payload
      description: Get the full payload data for large events stored off-chain
      security: []
      parameters:
        - name: contentHash
          in: path
          required: true
          schema:
            type: string
          description: SHA-256 content hash of the payload
          example: "ca2edba6b66f1b32ca4862ad3f47ceca3909bc517a4b6169aeb6b6f3efc92094"
      responses:
        '200':
          description: Payload retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadResponse'
        '404':
          description: Payload not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/company/{companyId}/dashboard:
    get:
      tags: [Analytics]
      summary: Get company dashboard
      description: Retrieve analytics and statistics for a specific company
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
          description: Company ID
          example: 1
        - name: days
          in: query
          schema:
            type: integer
            default: 30
          description: Number of days to include in statistics
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDashboard'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied to this company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/product/{productId}/trace:
    get:
      tags: [Analytics]
      summary: Get product traceability
      description: Retrieve the complete event history for a specific product
      security: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Product identifier
          example: "ORGANIC_APPLE_001"
      responses:
        '200':
          description: Product trace retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTrace'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/transaction/{transactionHash}/status:
    get:
      tags: [Blockchain]
      summary: Check transaction status
      description: Get the current status and confirmation count for a blockchain transaction
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: transactionHash
          in: path
          required: true
          schema:
            type: string
          description: Kaspa blockchain transaction hash
          example: "878ca4be0c99e224606177fcdfcc4d67e5c5283274d0b04b531a07d214c7d8e0"
      responses:
        '200':
          description: Transaction status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatus'
        '400':
          description: Invalid transaction hash format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/storage/stats:
    get:
      tags: [System]
      summary: Get storage statistics
      description: Retrieve comprehensive storage statistics from database and disk
      security: []
      responses:
        '200':
          description: Storage statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  database:
                    $ref: '#/components/schemas/DatabaseStats'
                  storage:
                    $ref: '#/components/schemas/StorageStats'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      tags: [System]
      summary: System health check
      description: Comprehensive health check of all system components
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '500':
          description: System is unhealthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheck'
                  - type: object
                    properties:
                      status:
                        example: "unhealthy"
                      error:
                        type: string

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Supply Chain
    description: Supply chain event submission and retrieval
  - name: Analytics
    description: Dashboard analytics and traceability
  - name: Blockchain
    description: Blockchain transaction monitoring
  - name: System
    description: System monitoring and health checks 